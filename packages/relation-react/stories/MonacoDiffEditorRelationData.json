{
  "key": "content:files/en-us/web/javascript/guide/regular_expressions/character_classes/index.md:translated-content:files/zh-cn/web/javascript/guide/regular_expressions/character_classes/index.md",
  "id": "60295e7ed6311851dd4a768b1b5dc0473f2d667c",
  "checkResults": [
    {
      "id": "y659482a98",
      "fromRange": [
        1,
        16
      ],
      "toRange": [
        1,
        17
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        1,
        16
      ],
      "toModifiedRange": [
        1,
        17
      ]
    },
    {
      "id": "0uah9iqrq2",
      "fromRange": [
        18,
        328
      ],
      "toRange": [
        19,
        186
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": true,
      "fromModifiedRange": [
        18,
        328
      ],
      "toModifiedRange": [
        19,
        186
      ]
    },
    {
      "id": "siva0qfaeu",
      "fromRange": [
        330,
        330
      ],
      "toRange": [
        188,
        188
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        330,
        330
      ],
      "toModifiedRange": [
        188,
        188
      ]
    },
    {
      "id": "t03lyfpb3h",
      "fromRange": [
        332,
        343
      ],
      "toRange": [
        190,
        201
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        332,
        343
      ],
      "toModifiedRange": [
        190,
        201
      ]
    },
    {
      "id": "t4sqje5nrj",
      "fromRange": [
        345,
        356
      ],
      "toRange": [
        203,
        214
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        345,
        356
      ],
      "toModifiedRange": [
        203,
        214
      ]
    },
    {
      "id": "nyxwv612vx",
      "fromRange": [
        358,
        369
      ],
      "toRange": [
        216,
        227
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        358,
        369
      ],
      "toModifiedRange": [
        216,
        227
      ]
    },
    {
      "id": "gplzc1ijnk",
      "fromRange": [
        371,
        379
      ],
      "toRange": [
        229,
        237
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        371,
        379
      ],
      "toModifiedRange": [
        229,
        237
      ]
    },
    {
      "id": "yf7e9pbwc0",
      "fromRange": [
        381,
        391
      ],
      "toRange": [
        239,
        249
      ],
      "fromRev": "955b18aef0a65898b6c0a3a7785836f94fe2b9f3",
      "toRev": "560d11105152f6202432741847cffcd4a1ca88c9",
      "dirty": false,
      "fromModifiedRange": [
        381,
        391
      ],
      "toModifiedRange": [
        239,
        249
      ]
    }
  ],
  "fromPath": "files/en-us/web/javascript/guide/regular_expressions/character_classes/index.md",
  "fromBaseDir": "content",
  "toPath": "files/zh-cn/web/javascript/guide/regular_expressions/character_classes/index.md",
  "toBaseDir": "translated-content",
  "currentFromRev": "3b7f5cec6c268a6d158c5210b9ae1f25ad084318",
  "currentToRev": "560d11105152f6202432741847cffcd4a1ca88c9",
  "originalAndModifiedContent": {
    "fromOriginalContent": "---\ntitle: Character classes\nslug: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\ntags:\n  - Guide\n  - JavaScript\n  - Reference\n  - RegExp\n  - Regular Expressions\n  - character classes\n---\n{{JSSidebar(\"JavaScript Guide\")}}\n\nCharacter classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-character-classes.html\")}}\n\n## Types\n\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n  <tbody>\n    <tr>\n      <td>\n        <code>[xyz]<br />[a-c]</code>\n      </td>\n      <td>\n        <p>\n          A character class. Matches any one of the enclosed characters. You can\n          specify a range of characters by using a hyphen, but if the hyphen\n          appears as the first or last character enclosed in the square brackets,\n          it is taken as a literal hyphen to be included in the character class\n          as a normal character.\n        </p>\n        <p>\n          For example, <code>[abcd]</code> is the same as <code>[a-d]</code>.\n          They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the\n          \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in\n          \"non-profit\".\n        </p>\n        <p>\n          For example, <code>[\\w-]</code> is the same as\n          <code>[A-Za-z0-9_-]</code>. They both match the \"b\" in \"brisket\", the\n          \"c\" in \"chop\", and the \"n\" in \"non-profit\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code>[^xyz]<br />[^a-c]</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          A negated or complemented character class. That is, it matches\n          anything that is not enclosed in the brackets. You can specify a range\n          of characters by using a hyphen, but if the hyphen appears as the\n          first character after the <code>^</code> or the last character enclosed in the square brackets, it is taken as\n          a literal hyphen to be included in the character class as a normal\n          character. For example, <code>[^abc]</code> is the same as\n          <code>[^a-c]</code>. They initially match \"o\" in \"bacon\" and \"h\" in\n          \"chop\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> The ^ character may also indicate the\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\"\n              >beginning of input</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>Has one of the following meanings:</p>\n        <ul>\n          <li>\n            Matches any single character <em>except</em> line terminators:\n            <code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or\n            <code>\\u2029</code>. For example, <code>/.y/</code> matches \"my\" and\n            \"ay\", but not \"yes\", in \"yes make my day\".\n          </li>\n          <li>\n            Inside a character class, the dot loses its special meaning and\n            matches a literal dot.\n          </li>\n        </ul>\n        <p>\n          Note that the <code>m</code> multiline flag doesn't change the dot\n          behavior. So to match a pattern across multiple lines, the character\n          class <code>[^]</code> can be used — it will match any character\n          including newlines.\n        </p>\n        <p>\n          ES2018 added the <code>s</code> \"dotAll\" flag, which allows the dot to\n          also match line terminators.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>\n          Matches any digit (Arabic numeral). Equivalent to <code>[0-9]</code>.\n          For example, <code>/\\d/</code> or <code>/[0-9]/</code> matches \"2\" in\n          \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          Matches any character that is not a digit (Arabic numeral). Equivalent\n          to <code>[^0-9]</code>. For example, <code>/\\D/</code> or\n          <code>/[^0-9]/</code> matches \"B\" in \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          Matches any alphanumeric character from the basic Latin alphabet,\n          including the underscore. Equivalent to <code>[A-Za-z0-9_]</code>. For\n          example, <code>/\\w/</code> matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\"\n          in \"3D\" and \"m\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          Matches any character that is not a word character from the basic\n          Latin alphabet. Equivalent to <code>[^A-Za-z0-9_]</code>. For example,\n          <code>/\\W/</code> or <code>/[^A-Za-z0-9_]/</code> matches \"%\" in \"50%\"\n          and \"É\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          Matches a single white space character, including space, tab, form\n          feed, line feed, and other Unicode spaces. Equivalent to\n          <code\n            >[\n            \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code\n          >. For example, <code>/\\s\\w*/</code> matches \" bar\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          Matches a single character other than white space. Equivalent to\n          <code\n            >[^\n            \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code\n          >. For example, <code>/\\S\\w*/</code> matches \"foo\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Matches a horizontal tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Matches a carriage return.</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Matches a linefeed.</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Matches a vertical tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Matches a form-feed.</td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>\n        Matches a backspace. If you're looking for the word-boundary character\n        (<code>\\b</code>), see\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\"\n          >Assertions</a\n        >.\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Matches a NUL character. Do not follow this with another digit.</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\c<em>X</em></code>\n      </td>\n      <td>\n        <p>\n          Matches a control character using\n          <a href=\"https://en.wikipedia.org/wiki/Caret_notation\"\n            >caret notation</a\n          >, where \"X\" is a letter from A–Z (corresponding to codepoints\n          <code>U+0001</code><em>–</em><code>U+001A</code>). For example,\n          <code>/\\cM\\cJ/</code> matches \"\\r\\n\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\x<em>hh</em></code>\n      </td>\n      <td>\n        Matches the character with the code <code><em>hh</em></code> (two\n        hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>hhhh</em></code>\n      </td>\n      <td>\n        Matches a UTF-16 code-unit with the value\n        <code><em>hhhh</em></code> (four hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>{hhhh}</em> or <em>\\u{hhhhh}</em></code>\n      </td>\n      <td>\n        (Only when the <code>u</code> flag is set.) Matches the character with\n        the Unicode value <code>U+<em>hhhh</em></code> or <code\n          >U+<em>hhhhh</em></code\n        >\n        (hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td>\n        Matches a character based on its\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\"\n          >Unicode character properties</a\n        >\n        (to match just, for example, emoji characters, or Japanese\n        <em>katakana</em> characters, or Chinese/Japanese Han/Kanji characters,\n        etc.).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Indicates that the following character should be treated specially, or\n          \"escaped\". It behaves one of two ways.\n        </p>\n        <ul>\n          <li>\n            For characters that are usually treated literally, indicates that\n            the next character is special and not to be interpreted literally.\n            For example, <code>/b/</code> matches the character \"b\". By placing\n            a backslash in front of \"b\", that is by using <code>/\\b/</code>, the\n            character becomes special to mean match a word boundary.\n          </li>\n          <li>\n            For characters that are usually treated specially, indicates that\n            the next character is not special and should be interpreted\n            literally. For example, \"*\" is a special character that means 0 or\n            more occurrences of the preceding character should be matched; for\n            example, <code>/a*/</code> means match 0 or more \"a\"s. To match\n            <code>*</code> literally, precede it with a backslash; for example,\n            <code>/a\\*/</code> matches \"a*\".\n          </li>\n        </ul>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> To match this character literally, escape it\n            with itself. In other words to search for <code>\\</code> use\n            <code>/\\\\/</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>|<em>y</em></code>\n      </td>\n      <td>\n        <p>\n          <strong>Disjunction: </strong>Matches either \"x\" or \"y\". Each component, separated by a pipe (<code>|</code>), is called an <em>alternative</em>. For example,\n          <code>/green|red/</code> matches \"green\" in \"green apple\" and \"red\" in\n          \"red apple\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">group</a> to make it part of a bigger pattern. <code>[abc]</code> is functionally equivalent to <code>(?:a|b|c)</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## Examples\n\n### Looking for a series of digits\n\n```js\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n// \\b indicates a boundary (i.e. do not start matching in the middle of a word)\n// \\d{4} indicates a digit, four times\n// \\b indicates another boundary (i.e. do not end matching in the middle of a word)\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\n### Looking for a word (from the latin alphabet) starting with A\n\n```js\nconst aliceExcerpt = \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n// \\b indicates a boundary (i.e. do not start matching in the middle of a word)\n// [aA] indicates the letter a or A\n// \\w+ indicates any character *from the latin alphabet*, multiple times\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\n### Looking for a word (from Unicode characters)\n\nInstead of the Latin alphabet, we can use a range of Unicode characters to identify a word (thus being able to deal with text in other languages like Russian or Arabic). The \"Basic Multilingual Plane\" of Unicode contains most of the characters used around the world and we can use character classes and ranges to match words written with those characters.\n\n```js\nconst nonEnglishText = \"Приключения Алисы в Стране чудес\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// BMP goes through U+0000 to U+FFFF but space is U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[ 'Приключения', 'Алисы', 'в', 'Стране', 'чудес' ]\n```\n\n### Counting vowels\n\n```js\nconst aliceExcerpt = \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[AEIOUYaeiouy]/g;\n\nconsole.log(\"Number of vowels:\", aliceExcerpt.match(regexpVowels).length);\n// Number of vowels: 26\n```\n\n## See also\n\n- [Regular expressions guide](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n  - [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions)\n  - [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers)\n  - [Unicode property escapes](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes)\n  - [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences)\n\n- [The `RegExp()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [CharacterClass in the ECMAScript specification](https://tc39.es/ecma262/multipage/text-processing.html#sec-characterclass)\n",
    "fromModifiedContent": "---\ntitle: Character classes\nslug: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\ntags:\n  - Guide\n  - JavaScript\n  - Reference\n  - RegExp\n  - Regular Expressions\n  - character classes\n---\n{{JSSidebar(\"JavaScript Guide\")}}\n\nCharacter classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-character-classes.html\")}}\n\n## Types\n\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n  <tbody>\n    <tr>\n      <td>\n        <code>[xyz]<br />[a-c]</code>\n      </td>\n      <td>\n        <p>\n          A character class. Matches any one of the enclosed characters. You can\n          specify a range of characters by using a hyphen, but if the hyphen\n          appears as the first or last character enclosed in the square brackets,\n          it is taken as a literal hyphen to be included in the character class\n          as a normal character.\n        </p>\n        <p>\n          For example, <code>[abcd]</code> is the same as <code>[a-d]</code>.\n          They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the\n          \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in\n          \"non-profit\".\n        </p>\n        <p>\n          For example, <code>[\\w-]</code> is the same as\n          <code>[A-Za-z0-9_-]</code>. They both match the \"b\" in \"brisket\", the\n          \"c\" in \"chop\", and the \"n\" in \"non-profit\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code>[^xyz]<br />[^a-c]</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          A negated or complemented character class. That is, it matches\n          anything that is not enclosed in the brackets. You can specify a range\n          of characters by using a hyphen, but if the hyphen appears as the\n          first character after the <code>^</code> or the last character enclosed in the square brackets, it is taken as\n          a literal hyphen to be included in the character class as a normal\n          character. For example, <code>[^abc]</code> is the same as\n          <code>[^a-c]</code>. They initially match \"o\" in \"bacon\" and \"h\" in\n          \"chop\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> The ^ character may also indicate the\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\"\n              >beginning of input</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>Has one of the following meanings:</p>\n        <ul>\n          <li>\n            Matches any single character <em>except</em> line terminators:\n            <code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or\n            <code>\\u2029</code>. For example, <code>/.y/</code> matches \"my\" and\n            \"ay\", but not \"yes\", in \"yes make my day\".\n          </li>\n          <li>\n            Inside a character class, the dot loses its special meaning and\n            matches a literal dot.\n          </li>\n        </ul>\n        <p>\n          Note that the <code>m</code> multiline flag doesn't change the dot\n          behavior. So to match a pattern across multiple lines, the character\n          class <code>[^]</code> can be used — it will match any character\n          including newlines.\n        </p>\n        <p>\n          The <code>s</code> \"dotAll\" flag allows the dot to\n          also match line terminators.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>\n          Matches any digit (Arabic numeral). Equivalent to <code>[0-9]</code>.\n          For example, <code>/\\d/</code> or <code>/[0-9]/</code> matches \"2\" in\n          \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          Matches any character that is not a digit (Arabic numeral). Equivalent\n          to <code>[^0-9]</code>. For example, <code>/\\D/</code> or\n          <code>/[^0-9]/</code> matches \"B\" in \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          Matches any alphanumeric character from the basic Latin alphabet,\n          including the underscore. Equivalent to <code>[A-Za-z0-9_]</code>. For\n          example, <code>/\\w/</code> matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\"\n          in \"3D\" and \"m\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          Matches any character that is not a word character from the basic\n          Latin alphabet. Equivalent to <code>[^A-Za-z0-9_]</code>. For example,\n          <code>/\\W/</code> or <code>/[^A-Za-z0-9_]/</code> matches \"%\" in \"50%\"\n          and \"É\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          Matches a single white space character, including space, tab, form\n          feed, line feed, and other Unicode spaces. Equivalent to\n          <code\n            >[\n            \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code\n          >. For example, <code>/\\s\\w*/</code> matches \" bar\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          Matches a single character other than white space. Equivalent to\n          <code\n            >[^\n            \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code\n          >. For example, <code>/\\S\\w*/</code> matches \"foo\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Matches a horizontal tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Matches a carriage return.</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Matches a linefeed.</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Matches a vertical tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Matches a form-feed.</td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>\n        Matches a backspace. If you're looking for the word-boundary character\n        (<code>\\b</code>), see\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\"\n          >Assertions</a\n        >.\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Matches a NUL character. Do not follow this with another digit.</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\c<em>X</em></code>\n      </td>\n      <td>\n        <p>\n          Matches a control character using\n          <a href=\"https://en.wikipedia.org/wiki/Caret_notation\"\n            >caret notation</a\n          >, where \"X\" is a letter from A–Z (corresponding to codepoints\n          <code>U+0001</code><em>–</em><code>U+001A</code>). For example,\n          <code>/\\cM\\cJ/</code> matches \"\\r\\n\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\x<em>hh</em></code>\n      </td>\n      <td>\n        Matches the character with the code <code><em>hh</em></code> (two\n        hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>hhhh</em></code>\n      </td>\n      <td>\n        Matches a UTF-16 code-unit with the value\n        <code><em>hhhh</em></code> (four hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>{hhhh}</em> or <em>\\u{hhhhh}</em></code>\n      </td>\n      <td>\n        (Only when the <code>u</code> flag is set.) Matches the character with\n        the Unicode value <code>U+<em>hhhh</em></code> or <code\n          >U+<em>hhhhh</em></code\n        >\n        (hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td>\n        Matches a character based on its\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\"\n          >Unicode character properties</a\n        >\n        (to match just, for example, emoji characters, or Japanese\n        <em>katakana</em> characters, or Chinese/Japanese Han/Kanji characters,\n        etc.).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Indicates that the following character should be treated specially, or\n          \"escaped\". It behaves one of two ways.\n        </p>\n        <ul>\n          <li>\n            For characters that are usually treated literally, indicates that\n            the next character is special and not to be interpreted literally.\n            For example, <code>/b/</code> matches the character \"b\". By placing\n            a backslash in front of \"b\", that is by using <code>/\\b/</code>, the\n            character becomes special to mean match a word boundary.\n          </li>\n          <li>\n            For characters that are usually treated specially, indicates that\n            the next character is not special and should be interpreted\n            literally. For example, \"*\" is a special character that means 0 or\n            more occurrences of the preceding character should be matched; for\n            example, <code>/a*/</code> means match 0 or more \"a\"s. To match\n            <code>*</code> literally, precede it with a backslash; for example,\n            <code>/a\\*/</code> matches \"a*\".\n          </li>\n        </ul>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> To match this character literally, escape it\n            with itself. In other words to search for <code>\\</code> use\n            <code>/\\\\/</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>|<em>y</em></code>\n      </td>\n      <td>\n        <p>\n          <strong>Disjunction: </strong>Matches either \"x\" or \"y\". Each component, separated by a pipe (<code>|</code>), is called an <em>alternative</em>. For example,\n          <code>/green|red/</code> matches \"green\" in \"green apple\" and \"red\" in\n          \"red apple\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">group</a> to make it part of a bigger pattern. <code>[abc]</code> is functionally equivalent to <code>(?:a|b|c)</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## Examples\n\n### Looking for a series of digits\n\n```js\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n// \\b indicates a boundary (i.e. do not start matching in the middle of a word)\n// \\d{4} indicates a digit, four times\n// \\b indicates another boundary (i.e. do not end matching in the middle of a word)\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\n### Looking for a word (from the latin alphabet) starting with A\n\n```js\nconst aliceExcerpt = \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n// \\b indicates a boundary (i.e. do not start matching in the middle of a word)\n// [aA] indicates the letter a or A\n// \\w+ indicates any character *from the latin alphabet*, multiple times\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\n### Looking for a word (from Unicode characters)\n\nInstead of the Latin alphabet, we can use a range of Unicode characters to identify a word (thus being able to deal with text in other languages like Russian or Arabic). The \"Basic Multilingual Plane\" of Unicode contains most of the characters used around the world and we can use character classes and ranges to match words written with those characters.\n\n```js\nconst nonEnglishText = \"Приключения Алисы в Стране чудес\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// BMP goes through U+0000 to U+FFFF but space is U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[ 'Приключения', 'Алисы', 'в', 'Стране', 'чудес' ]\n```\n\n### Counting vowels\n\n```js\nconst aliceExcerpt = \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[AEIOUYaeiouy]/g;\n\nconsole.log(\"Number of vowels:\", aliceExcerpt.match(regexpVowels).length);\n// Number of vowels: 26\n```\n\n## See also\n\n- [Regular expressions guide](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n  - [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions)\n  - [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers)\n  - [Unicode property escapes](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes)\n  - [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences)\n\n- [The `RegExp()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [CharacterClass in the ECMAScript specification](https://tc39.es/ecma262/multipage/text-processing.html#sec-characterclass)\n",
    "toOriginalContent": "---\ntitle: 字符类\nslug: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\ntags:\n  - 指南\n  - JavaScript\n  - 参考\n  - RegExp\n  - 正则表达式\n  - 字符类\ntranslation_of: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\n---\n{{JSSidebar(\"JavaScript Guide\")}}\n\n字符类可以区分各种字符，例如区分字母和数字。\n\n{{EmbedInteractiveExample(\"pages/js/regexp-character-classes.html\")}}\n\n## 类型\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">字符</th>\n   <th scope=\"col\">含义</th>\n  </tr>\n </thead>\n <tbody>\n </tbody>\n <tbody>\n  <tr>\n   <td>\n    <code>[xyz]<br />[a-c]</code>\n   </td>\n   <td>\n    <p>一个字符类。匹配包含在方括号中的任何字符。你可以使用连字符指定字符范围，但如果连字符出现在方括号中的第一个或最后一个字符，则将其视为字面连字符，作为普通字符包含在字符类中。</p>\n    <p>例如，<code>[abcd]</code> 与 <code>[a-d]</code> 相同。它们匹配“brisket”中的“b”和“chop”中的“c”。</p>\n    <p>例如，<code>[abcd-]</code> 和 <code>[-abcd]</code> 匹配“brisket”中的“b”、“chop”中的“c”和“non-profit”中的“-”（连字符）。</p>\n    <p>例如，<code>[\\w-]</code> 与 <code>[A-Za-z0-9_-]</code> 相同。它们都匹配“brisket”中的“b”、“chop”中的“c”和“non-profit”中的“n”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <p>\n     <code>[^xyz]<br />[^a-c]</code>\n    </p>\n   </td>\n   <td>\n    <p>一个否定或补充的字符类。也就是说，它匹配未包含在方括号中的任何字符。你可以使用连字符指定字符范围，但如果连字符出现在<code>^</code>后的第一个字符或方括号中的或最后一个字符，则将其视为字面连字符，作为普通字符包含在字符类中。例如，<code>[^abc]</code> 与 <code>[^a-c]</code> 相同。它们首先匹配“bacon”中的“o”和“chop”中的“h”。</p>\n    <div class=\"notecard note\">\n     <p><strong>备注：</strong> ^ 字符也可以表示<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">输入的开始</a>。</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>.</code></td>\n   <td>\n    <p>有下列含义之一：</p>\n    <ul>\n     <li>匹配除行终止符之外的任何单个字符：<code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or <code>\\u2029</code>. 例如，<code>/.y/</code> 在“yes make my day”中匹配“my”和“ay”，而不是“yes”。</li>\n     <li>在字符集内，点失去了它的特殊意义，并与文字点匹配。</li>\n    </ul>\n    <p>需要注意的是，<code>m</code> multiline 标志不会改变点的行为。因此，要跨多行匹配一个模式，可以使用字符集<code>[^]</code>—它将匹配任何字符，包括新行。</p>\n    <p>ES2018 添加了 <code>s</code>“dotAll”标志，它允许点也匹配行终止符。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\d</code></td>\n   <td>\n    <p>匹配任何数字 (阿拉伯数字)。相当于 <code>[0-9]</code>。例如，<code>/\\d/</code> 或 <code>/[0-9]/</code> 匹配“B2is the suite number”中的“2”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\D</code></td>\n   <td>\n    <p>匹配任何非数字 (阿拉伯数字) 的字符。相当于<code>[^0-9]</code>。例如，<code>/\\D/</code> 或者 <code>/[^0-9]/</code> 匹配“B2 is the suite number”中的“B”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\w</code></td>\n   <td>\n    <p>匹配基本拉丁字母中的任何字母数字字符，包括下划线。相当于 <code>[A-Za-z0-9_]</code>。例如，<code>/\\w/</code> 匹配“apple”中的“a”，匹配“$5.28”中的“5”，匹配“3D”中的“3”，以及匹配“Émanuel”中的“m”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\W</code></td>\n   <td>\n    <p>匹配任何不是来自基本拉丁字母的单词字符。相当于 <code>[^A-Za-z0-9_]</code>。例如，<code>/\\W/</code> 或者 <code>/[^A-Za-z0-9_]/</code> 匹配“50%”中的“%”，以及匹配“Émanuel”中的“É”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\s</code></td>\n   <td>\n    <p>匹配单个空白字符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。相当于 <code>[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>。例如，<code>/\\s\\w*/</code> 匹配“foo bar”中的“ bar”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\S</code></td>\n   <td>\n    <p>匹配除空格以外的单个字符。相当于 <code>[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>。例如，<code>/\\S\\w*/</code> 匹配“foo bar”中的“foo”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\t</code></td>\n   <td>匹配水平制表符。</td>\n  </tr>\n  <tr>\n   <td><code>\\r</code></td>\n   <td>匹配回车符。</td>\n  </tr>\n  <tr>\n   <td><code>\\n</code></td>\n   <td>匹配换行符。</td>\n  </tr>\n  <tr>\n   <td><code>\\v</code></td>\n   <td>匹配垂直制表符。</td>\n  </tr>\n  <tr>\n   <td><code>\\f</code></td>\n   <td>匹配换页符。</td>\n  </tr>\n  <tr>\n   <td><code>[\\b]</code></td>\n   <td>匹配退格键。如果您正在寻找单词边界字符（<code>\\b</code>），请参阅<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">断言</a>。</td>\n  </tr>\n  <tr>\n   <td><code>\\0</code></td>\n   <td>匹配一个 NUL 字符。不要在此后面加上另一个数字。</td>\n  </tr>\n  <tr>\n   <td><code>\\c<em>X</em></code></td>\n   <td>\n    <p>使用<a href=\"https://en.wikipedia.org/wiki/Caret_notation\">插入符号</a>匹配控制字符，其中“X”是 A–Z 中的一个字母（对应于代码点 <code>U+0001</code><em>–</em><code>U+001F</code>）。例如，<code>/\\cM\\cJ/</code>匹配“\\r\\n”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\x<em>hh</em></code></td>\n   <td>匹配与代码 <code><em>hh</em></code>（两个十六进制数字）对应的字符。</td>\n  </tr>\n  <tr>\n   <td><code>\\u<em>hhhh</em></code></td>\n   <td>匹配与值 <code><em>hhhh</em></code>（四个十六进制数字）对应的 UTF-16 代码单元。</td>\n  </tr>\n  <tr>\n   <td><code>\\u<em>{hhhh}</em> 或 <em>\\u{hhhhh}</em></code></td>\n   <td>（仅当设置了 <code>u</code> 标志时。）匹配与 Unicode 值 <code>U+<em>hhhh</em></code> 或 <code>U+<em>hhhhh</em></code>（十六进制数字）对应的字符。</td>\n  </tr>\n  <tr>\n    <td>\n      <code>\\p{<em>UnicodeProperty</em>}</code>，<code>\\P{<em>UnicodeProperty</em>}</code>\n    </td>\n    <td>\n      根据字符的 <a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode 字符属性</a>匹配字符（例如，仅匹配表情符号字符、日文<em>片假名</em>字符、中文汉字字符或日文汉字字符等）。\n    </td>\n  </tr>\n  <tr>\n   <td><code>\\</code></td>\n   <td>\n    <p>指示应特殊处理或“转义”后面的字符。它表现为两种方式之一。</p>\n    <ul>\n     <li>对于通常按字面处理的字符，表示下一个字符是特殊的，不能按字面解释。例如，<code>/b/</code> 匹配字符“b”。通过在“b”前面放置反斜杠，即使用 <code>/\\b/</code>，字符变得特殊以表示匹配单词边界。</li>\n     <li>对于通常被特殊对待的字符，表示下一个字符不是特殊的，应该按字面意思解释。例如，“*”是一个特殊字符，表示应该匹配前面的字符出现 0 次或多次；例如，<code>/a*/</code> 示匹配 0 个或多个“a”。要从字面上匹配 <code>*</code> 需在其前面加上反斜杠；例如，<code>/a\\*/</code> 匹配“a*”。</li>\n    </ul>\n    <div class=\"notecard note\">\n    <p><strong>备注：</strong>要从字面上匹配此字符，请将其转义。换句话说就是搜索 <code>\\</code> 需要使用 <code>/\\\\/</code>。</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <code><em>x</em>|<em>y</em></code>\n   </td>\n   <td>\n    <p>\n     <strong>析取：</strong>匹配“x”或“y”。每个由管道符 (<code>|</code>) 分隔的部分称为一个<em>可选项</em>。例如，<code>/green|red/</code> 匹配“green apple”中的“green”和“red apple”中的“red”。\n    </p>\n    <div class=\"notecard note\">\n     <p>\n      <strong>备注：</strong> 析取是指定“一组选择”的另一种方式，但它不是字符类。析取不是原子的——你需要使用<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">组</a>使其成为一个更大的模式的一部分。<code>[abc]</code> 在功能上等同于 <code>(?:a|b|c)</code>。\n     </p>\n    </div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n## 示例\n\n### 寻找一系列数字\n\n```js\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n// \\b 表示边界（即不要在单词中间开始匹配）\n// \\d{4} 表示一个数字，四次\n// \\b 表示另一个边界（即不要在单词中间结束匹配）\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\n### 寻找以 A 开头的拉丁字母单词\n\n```js\nconst aliceExcerpt = \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n// \\b 表示边界（即不要在单词中间开始匹配）\n// [aA] 表示字母 a 或 A\n// \\w+ 表示任何*拉丁字母*字符，多次\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\n### 寻找一个 Unicode 字符的单词\n\n代替拉丁字母，我们可以使用一系列 Unicode 字符来识别一个单词（从而能够处理其他语言的文本，如中文、俄语或阿拉伯语）。Unicode 的“基本多文种平面（Basic Multilingual Plane）”包含世界各地使用的大部分字符，我们可以使用字符类和范围来匹配用这些字符编写的单词。\n\n```js\nconst nonEnglishText = \"爱丽丝 梦游 仙境\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// 基本多文种平面范围是 U+0000 到 U+FFFF 但空格是 U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[ '爱丽丝', '梦游', '仙境' ]\n```\n\n### 计算元音个数\n\n```js\nconst aliceExcerpt = \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[AEIOUYaeiouy]/g;\n\nconsole.log(\"元音数：\", aliceExcerpt.match(regexpVowels).length);\n// 元音数：26\n```\n\n## 参见\n\n- [正则表达式](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n  - [断言](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions)\n  - [量词](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers)\n  - [Unicode 属性转义](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes)\n  - [组和后向引用](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences)\n\n- [`RegExp()` 构造函数](/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [CharacterClass in the ECMAScript specification](https://tc39.es/ecma262/multipage/text-processing.html#sec-characterclass)\n",
    "toModifiedContent": "---\ntitle: 字符类\nslug: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\ntags:\n  - 指南\n  - JavaScript\n  - 参考\n  - RegExp\n  - 正则表达式\n  - 字符类\ntranslation_of: Web/JavaScript/Guide/Regular_Expressions/Character_Classes\n---\n{{JSSidebar(\"JavaScript Guide\")}}\n\n字符类可以区分各种字符，例如区分字母和数字。\n\n{{EmbedInteractiveExample(\"pages/js/regexp-character-classes.html\")}}\n\n## 类型\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">字符</th>\n   <th scope=\"col\">含义</th>\n  </tr>\n </thead>\n <tbody>\n </tbody>\n <tbody>\n  <tr>\n   <td>\n    <code>[xyz]<br />[a-c]</code>\n   </td>\n   <td>\n    <p>一个字符类。匹配包含在方括号中的任何字符。你可以使用连字符指定字符范围，但如果连字符出现在方括号中的第一个或最后一个字符，则将其视为字面连字符，作为普通字符包含在字符类中。</p>\n    <p>例如，<code>[abcd]</code> 与 <code>[a-d]</code> 相同。它们匹配“brisket”中的“b”和“chop”中的“c”。</p>\n    <p>例如，<code>[abcd-]</code> 和 <code>[-abcd]</code> 匹配“brisket”中的“b”、“chop”中的“c”和“non-profit”中的“-”（连字符）。</p>\n    <p>例如，<code>[\\w-]</code> 与 <code>[A-Za-z0-9_-]</code> 相同。它们都匹配“brisket”中的“b”、“chop”中的“c”和“non-profit”中的“n”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <p>\n     <code>[^xyz]<br />[^a-c]</code>\n    </p>\n   </td>\n   <td>\n    <p>一个否定或补充的字符类。也就是说，它匹配未包含在方括号中的任何字符。你可以使用连字符指定字符范围，但如果连字符出现在<code>^</code>后的第一个字符或方括号中的或最后一个字符，则将其视为字面连字符，作为普通字符包含在字符类中。例如，<code>[^abc]</code> 与 <code>[^a-c]</code> 相同。它们首先匹配“bacon”中的“o”和“chop”中的“h”。</p>\n    <div class=\"notecard note\">\n     <p><strong>备注：</strong> ^ 字符也可以表示<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">输入的开始</a>。</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>.</code></td>\n   <td>\n    <p>有下列含义之一：</p>\n    <ul>\n     <li>匹配除行终止符之外的任何单个字符：<code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or <code>\\u2029</code>. 例如，<code>/.y/</code> 在“yes make my day”中匹配“my”和“ay”，而不是“yes”。</li>\n     <li>在字符集内，点失去了它的特殊意义，并与文字点匹配。</li>\n    </ul>\n    <p>需要注意的是，<code>m</code> multiline 标志不会改变点的行为。因此，要跨多行匹配一个模式，可以使用字符集<code>[^]</code>—它将匹配任何字符，包括新行。</p>\n    <p>ES2018 添加了 <code>s</code>“dotAll”标志，它允许点也匹配行终止符。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\d</code></td>\n   <td>\n    <p>匹配任何数字 (阿拉伯数字)。相当于 <code>[0-9]</code>。例如，<code>/\\d/</code> 或 <code>/[0-9]/</code> 匹配“B2is the suite number”中的“2”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\D</code></td>\n   <td>\n    <p>匹配任何非数字 (阿拉伯数字) 的字符。相当于<code>[^0-9]</code>。例如，<code>/\\D/</code> 或者 <code>/[^0-9]/</code> 匹配“B2 is the suite number”中的“B”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\w</code></td>\n   <td>\n    <p>匹配基本拉丁字母中的任何字母数字字符，包括下划线。相当于 <code>[A-Za-z0-9_]</code>。例如，<code>/\\w/</code> 匹配“apple”中的“a”，匹配“$5.28”中的“5”，匹配“3D”中的“3”，以及匹配“Émanuel”中的“m”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\W</code></td>\n   <td>\n    <p>匹配任何不是来自基本拉丁字母的单词字符。相当于 <code>[^A-Za-z0-9_]</code>。例如，<code>/\\W/</code> 或者 <code>/[^A-Za-z0-9_]/</code> 匹配“50%”中的“%”，以及匹配“Émanuel”中的“É”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\s</code></td>\n   <td>\n    <p>匹配单个空白字符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。相当于 <code>[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>。例如，<code>/\\s\\w*/</code> 匹配“foo bar”中的“ bar”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\S</code></td>\n   <td>\n    <p>匹配除空格以外的单个字符。相当于 <code>[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>。例如，<code>/\\S\\w*/</code> 匹配“foo bar”中的“foo”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\t</code></td>\n   <td>匹配水平制表符。</td>\n  </tr>\n  <tr>\n   <td><code>\\r</code></td>\n   <td>匹配回车符。</td>\n  </tr>\n  <tr>\n   <td><code>\\n</code></td>\n   <td>匹配换行符。</td>\n  </tr>\n  <tr>\n   <td><code>\\v</code></td>\n   <td>匹配垂直制表符。</td>\n  </tr>\n  <tr>\n   <td><code>\\f</code></td>\n   <td>匹配换页符。</td>\n  </tr>\n  <tr>\n   <td><code>[\\b]</code></td>\n   <td>匹配退格键。如果您正在寻找单词边界字符（<code>\\b</code>），请参阅<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">断言</a>。</td>\n  </tr>\n  <tr>\n   <td><code>\\0</code></td>\n   <td>匹配一个 NUL 字符。不要在此后面加上另一个数字。</td>\n  </tr>\n  <tr>\n   <td><code>\\c<em>X</em></code></td>\n   <td>\n    <p>使用<a href=\"https://en.wikipedia.org/wiki/Caret_notation\">插入符号</a>匹配控制字符，其中“X”是 A–Z 中的一个字母（对应于代码点 <code>U+0001</code><em>–</em><code>U+001F</code>）。例如，<code>/\\cM\\cJ/</code>匹配“\\r\\n”。</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\x<em>hh</em></code></td>\n   <td>匹配与代码 <code><em>hh</em></code>（两个十六进制数字）对应的字符。</td>\n  </tr>\n  <tr>\n   <td><code>\\u<em>hhhh</em></code></td>\n   <td>匹配与值 <code><em>hhhh</em></code>（四个十六进制数字）对应的 UTF-16 代码单元。</td>\n  </tr>\n  <tr>\n   <td><code>\\u<em>{hhhh}</em> 或 <em>\\u{hhhhh}</em></code></td>\n   <td>（仅当设置了 <code>u</code> 标志时。）匹配与 Unicode 值 <code>U+<em>hhhh</em></code> 或 <code>U+<em>hhhhh</em></code>（十六进制数字）对应的字符。</td>\n  </tr>\n  <tr>\n    <td>\n      <code>\\p{<em>UnicodeProperty</em>}</code>，<code>\\P{<em>UnicodeProperty</em>}</code>\n    </td>\n    <td>\n      根据字符的 <a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode 字符属性</a>匹配字符（例如，仅匹配表情符号字符、日文<em>片假名</em>字符、中文汉字字符或日文汉字字符等）。\n    </td>\n  </tr>\n  <tr>\n   <td><code>\\</code></td>\n   <td>\n    <p>指示应特殊处理或“转义”后面的字符。它表现为两种方式之一。</p>\n    <ul>\n     <li>对于通常按字面处理的字符，表示下一个字符是特殊的，不能按字面解释。例如，<code>/b/</code> 匹配字符“b”。通过在“b”前面放置反斜杠，即使用 <code>/\\b/</code>，字符变得特殊以表示匹配单词边界。</li>\n     <li>对于通常被特殊对待的字符，表示下一个字符不是特殊的，应该按字面意思解释。例如，“*”是一个特殊字符，表示应该匹配前面的字符出现 0 次或多次；例如，<code>/a*/</code> 示匹配 0 个或多个“a”。要从字面上匹配 <code>*</code> 需在其前面加上反斜杠；例如，<code>/a\\*/</code> 匹配“a*”。</li>\n    </ul>\n    <div class=\"notecard note\">\n    <p><strong>备注：</strong>要从字面上匹配此字符，请将其转义。换句话说就是搜索 <code>\\</code> 需要使用 <code>/\\\\/</code>。</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <code><em>x</em>|<em>y</em></code>\n   </td>\n   <td>\n    <p>\n     <strong>析取：</strong>匹配“x”或“y”。每个由管道符 (<code>|</code>) 分隔的部分称为一个<em>可选项</em>。例如，<code>/green|red/</code> 匹配“green apple”中的“green”和“red apple”中的“red”。\n    </p>\n    <div class=\"notecard note\">\n     <p>\n      <strong>备注：</strong> 析取是指定“一组选择”的另一种方式，但它不是字符类。析取不是原子的——你需要使用<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">组</a>使其成为一个更大的模式的一部分。<code>[abc]</code> 在功能上等同于 <code>(?:a|b|c)</code>。\n     </p>\n    </div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n## 示例\n\n### 寻找一系列数字\n\n```js\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n// \\b 表示边界（即不要在单词中间开始匹配）\n// \\d{4} 表示一个数字，四次\n// \\b 表示另一个边界（即不要在单词中间结束匹配）\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\n### 寻找以 A 开头的拉丁字母单词\n\n```js\nconst aliceExcerpt = \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n// \\b 表示边界（即不要在单词中间开始匹配）\n// [aA] 表示字母 a 或 A\n// \\w+ 表示任何*拉丁字母*字符，多次\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\n### 寻找一个 Unicode 字符的单词\n\n代替拉丁字母，我们可以使用一系列 Unicode 字符来识别一个单词（从而能够处理其他语言的文本，如中文、俄语或阿拉伯语）。Unicode 的“基本多文种平面（Basic Multilingual Plane）”包含世界各地使用的大部分字符，我们可以使用字符类和范围来匹配用这些字符编写的单词。\n\n```js\nconst nonEnglishText = \"爱丽丝 梦游 仙境\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// 基本多文种平面范围是 U+0000 到 U+FFFF 但空格是 U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[ '爱丽丝', '梦游', '仙境' ]\n```\n\n### 计算元音个数\n\n```js\nconst aliceExcerpt = \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[AEIOUYaeiouy]/g;\n\nconsole.log(\"元音数：\", aliceExcerpt.match(regexpVowels).length);\n// 元音数：26\n```\n\n## 参见\n\n- [正则表达式](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n  - [断言](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions)\n  - [量词](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers)\n  - [Unicode 属性转义](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes)\n  - [组和后向引用](/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences)\n\n- [`RegExp()` 构造函数](/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [CharacterClass in the ECMAScript specification](https://tc39.es/ecma262/multipage/text-processing.html#sec-characterclass)\n"
  }
}